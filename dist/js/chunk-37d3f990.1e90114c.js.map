{"version":3,"sources":["webpack:///./node_modules/pidcrypt/md5.js","webpack:///./node_modules/pidcrypt/pidcrypt_util.js","webpack:///./node_modules/pidcrypt/index.js","webpack:///./src/views/Dialog.vue?7155","webpack:///src/views/Dialog.vue","webpack:///./src/views/Dialog.vue?cc72","webpack:///./src/views/Dialog.vue","webpack:///./node_modules/pidcrypt/aes_core.js","webpack:///./node_modules/pidcrypt/pidcrypt.js","webpack:///./node_modules/pidcrypt/aes_cbc.js"],"names":["pidCrypt","MD5","string","RotateLeft","lValue","iShiftBits","AddUnsigned","lX","lY","lX4","lY4","lX8","lY8","lResult","F","x","y","z","G","H","I","FF","a","b","c","d","s","ac","GG","HH","II","ConvertToWordArray","lWordCount","lMessageLength","length","lNumberOfWords_temp1","lNumberOfWords_temp2","lNumberOfWords","lWordArray","Array","lBytePosition","lByteCount","charCodeAt","WordToHex","lByte","lCount","WordToHexValue","WordToHexValue_temp","toString","substr","k","AA","BB","CC","DD","S11","S12","S13","S14","S21","S22","S23","S24","S31","S32","S33","S34","S41","S42","S43","S44","temp","toLowerCase","pidCryptUtil","encodeBase64","str","utf8encode","b64","o1","o2","o3","bits","h1","h2","h3","h4","plain","coded","e","pad","encodeUTF8","charAt","join","slice","decodeBase64","utf8decode","decodeUTF8","indexOf","String","fromCharCode","replace","cc","convertToHex","hs","hv","i","convertFromHex","parseInt","substring","stripLineFeeds","toByteArray","ba","fragment","lf","tmp","formatHex","str_new","hex","this","byteArray2String","module","exports","render","_vm","_h","$createElement","_c","_self","attrs","staticClass","infoUsers","friendId","avatar","_v","_s","user","name","_l","dialogInfo","message","key","crypted","id","whoSend","on","$event","preventDefault","sendMessage","model","value","callback","$$v","trim","expression","staticRenderFns","component","AES","env","blockSize","ShiftRowTabInv","xtime","SBox","SBoxInv","ShiftRowTab","prototype","init","setParams","expandKey","input","ks","kl","Rcon","alert","j","encrypt","l","block","addRoundKey","subBytes","shiftRows","mixColumns","decrypt","mixColumns_Inv","state","inv","box","rkey","shifttab","h","concat","s0","s1","s2","s3","xh","xOr_Array","a1","a2","res","getCounterBlock","ctrBlk","nonce","Date","getTime","nonceSec","Math","floor","nonceMs","getRandomBytes","len","bytes","field","random","setDefaults","params","nBits","salt","UTF8","A0_PAD","debug","dataIn","dataOut","decryptIn","decryptOut","encryptIn","encryptOut","iv","clear","errors","warnings","infos","debugMsg","pObj","p","getParams","getParam","clearParams","getNBits","getOutput","setError","error","appendError","getErrors","isError","appendInfo","getInfos","setDebug","flag","appendDebug","isDebug","getAllMessages","options","defaults","clr_mes","verbose","mes","CBC","pidcrypt","aes","lnbrk","password","o","k_iv","createKeyAndIv","initEncrypt","initDecrypt","ciphertext","initByValues","retObj","count","miter","data00","hashtarget","result","keymaterial","loop","encryptRaw","byteArray","charDiv","nBytes","keyBytes","isNaN","keySchedule","blockCount","ceil","ciphertxt","textBlock","plaintext","encryptText","decryptRaw","nBlocks","plaintxt","ciphertextBlock","dec_state","endByte","div","firstPadByte","decryptText"],"mappings":"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","file":"js/chunk-37d3f990.1e90114c.js","sourcesContent":["/**\n*\n*  MD5 (Message-Digest Algorithm) for use in pidCrypt Library\n*  Depends on pidCrypt (pidcrypt.js, pidcrypt_util.js)\n*\n*  For original source see http://www.webtoolkit.info/\n*  Download: 15.02.2009 from http://www.webtoolkit.info/javascript-md5.html\n**/\nvar pidCrypt = require('./pidcrypt.js');\n\nif(typeof(pidCrypt) != 'undefined') {\n  pidCrypt.MD5 = function(string) {\n\n    function RotateLeft(lValue, iShiftBits) {\n      return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));\n    }\n\n    function AddUnsigned(lX,lY) {\n      var lX4,lY4,lX8,lY8,lResult;\n      lX8 = (lX & 0x80000000);\n      lY8 = (lY & 0x80000000);\n      lX4 = (lX & 0x40000000);\n      lY4 = (lY & 0x40000000);\n      lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);\n      if (lX4 & lY4) {\n        return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n      }\n      if (lX4 | lY4) {\n        if (lResult & 0x40000000) {\n          return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n        } else {\n          return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n        }\n      } else {\n        return (lResult ^ lX8 ^ lY8);\n      }\n    }\n\n    function F(x,y,z) { return (x & y) | ((~x) & z); }\n    function G(x,y,z) { return (x & z) | (y & (~z)); }\n    function H(x,y,z) { return (x ^ y ^ z); }\n    function I(x,y,z) { return (y ^ (x | (~z))); }\n\n    function FF(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    };\n\n    function GG(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    };\n\n    function HH(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    };\n\n    function II(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    };\n\n    function ConvertToWordArray(string) {\n      var lWordCount;\n      var lMessageLength = string.length;\n      var lNumberOfWords_temp1=lMessageLength + 8;\n      var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;\n      var lNumberOfWords = (lNumberOfWords_temp2+1)*16;\n      var lWordArray=Array(lNumberOfWords-1);\n      var lBytePosition = 0;\n      var lByteCount = 0;\n      while ( lByteCount < lMessageLength ) {\n        lWordCount = (lByteCount-(lByteCount % 4))/4;\n        lBytePosition = (lByteCount % 4)*8;\n        lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));\n        lByteCount++;\n      }\n      lWordCount = (lByteCount-(lByteCount % 4))/4;\n      lBytePosition = (lByteCount % 4)*8;\n      lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);\n      lWordArray[lNumberOfWords-2] = lMessageLength<<3;\n      lWordArray[lNumberOfWords-1] = lMessageLength>>>29;\n      return lWordArray;\n    };\n\n    function WordToHex(lValue) {\n      var WordToHexValue=\"\",WordToHexValue_temp=\"\",lByte,lCount;\n      for (lCount = 0;lCount<=3;lCount++) {\n        lByte = (lValue>>>(lCount*8)) & 255;\n        WordToHexValue_temp = \"0\" + lByte.toString(16);\n        WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);\n      }\n      return WordToHexValue;\n    };\n\n    //**\tfunction Utf8Encode(string) removed. Aready defined in pidcrypt_utils.js\n\n    var x=Array();\n    var k,AA,BB,CC,DD,a,b,c,d;\n    var S11=7, S12=12, S13=17, S14=22;\n    var S21=5, S22=9 , S23=14, S24=20;\n    var S31=4, S32=11, S33=16, S34=23;\n    var S41=6, S42=10, S43=15, S44=21;\n\n    //\tstring = Utf8Encode(string); #function call removed\n\n    x = ConvertToWordArray(string);\n\n    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;\n\n    for (k=0;k<x.length;k+=16) {\n      AA=a; BB=b; CC=c; DD=d;\n      a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);\n      d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);\n      c=FF(c,d,a,b,x[k+2], S13,0x242070DB);\n      b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);\n      a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);\n      d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);\n      c=FF(c,d,a,b,x[k+6], S13,0xA8304613);\n      b=FF(b,c,d,a,x[k+7], S14,0xFD469501);\n      a=FF(a,b,c,d,x[k+8], S11,0x698098D8);\n      d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);\n      c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);\n      b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);\n      a=FF(a,b,c,d,x[k+12],S11,0x6B901122);\n      d=FF(d,a,b,c,x[k+13],S12,0xFD987193);\n      c=FF(c,d,a,b,x[k+14],S13,0xA679438E);\n      b=FF(b,c,d,a,x[k+15],S14,0x49B40821);\n      a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);\n      d=GG(d,a,b,c,x[k+6], S22,0xC040B340);\n      c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);\n      b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);\n      a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);\n      d=GG(d,a,b,c,x[k+10],S22,0x2441453);\n      c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);\n      b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);\n      a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);\n      d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);\n      c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);\n      b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);\n      a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);\n      d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);\n      c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);\n      b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);\n      a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);\n      d=HH(d,a,b,c,x[k+8], S32,0x8771F681);\n      c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);\n      b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);\n      a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);\n      d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);\n      c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);\n      b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);\n      a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);\n      d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);\n      c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);\n      b=HH(b,c,d,a,x[k+6], S34,0x4881D05);\n      a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);\n      d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);\n      c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);\n      b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);\n      a=II(a,b,c,d,x[k+0], S41,0xF4292244);\n      d=II(d,a,b,c,x[k+7], S42,0x432AFF97);\n      c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);\n      b=II(b,c,d,a,x[k+5], S44,0xFC93A039);\n      a=II(a,b,c,d,x[k+12],S41,0x655B59C3);\n      d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);\n      c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);\n      b=II(b,c,d,a,x[k+1], S44,0x85845DD1);\n      a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);\n      d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);\n      c=II(c,d,a,b,x[k+6], S43,0xA3014314);\n      b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);\n      a=II(a,b,c,d,x[k+4], S41,0xF7537E82);\n      d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);\n      c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);\n      b=II(b,c,d,a,x[k+9], S44,0xEB86D391);\n      a=AddUnsigned(a,AA);\n      b=AddUnsigned(b,BB);\n      c=AddUnsigned(c,CC);\n      d=AddUnsigned(d,DD);\n    }\n    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);\n    return temp.toLowerCase();\n  }\n}\n"," /*----------------------------------------------------------------------------*/\n // Copyright (c) 2009 pidder <www.pidder.com>\n // Permission to use, copy, modify, and/or distribute this software for any\n // purpose with or without fee is hereby granted, provided that the above\n // copyright notice and this permission notice appear in all copies.\n //\n // THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n // WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n // MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n // ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n // WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*----------------------------------------------------------------------------*/\n/*  (c) Chris Veness 2005-2008\n* You are welcome to re-use these scripts [without any warranty express or\n* implied] provided you retain my copyright notice and when possible a link to\n* my website (under a LGPL license). §ection numbers relate the code back to\n* sections in the standard.\n/*----------------------------------------------------------------------------*/\n/* Helper methods (base64 conversion etc.) needed for different operations in\n * encryption.\n\n/*----------------------------------------------------------------------------*/\n/* Intance methods extanding the String object                                */\n/*----------------------------------------------------------------------------*/\n/**\n * Encode string into Base64, as defined by RFC 4648 [http://tools.ietf.org/html/rfc4648]\n * As per RFC 4648, no newlines are added.\n *\n * @param utf8encode optional parameter, if set to true Unicode string is\n *                   encoded into UTF-8 before conversion to base64;\n *                   otherwise string is assumed to be 8-bit characters\n * @return coded     base64-encoded string\n */\npidCryptUtil = {};\npidCryptUtil.encodeBase64 = function(str,utf8encode) {  // http://tools.ietf.org/html/rfc4648\n  if(!str) str = \"\";\n  var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  utf8encode =  (typeof utf8encode == 'undefined') ? false : utf8encode;\n  var o1, o2, o3, bits, h1, h2, h3, h4, e=[], pad = '', c, plain, coded;\n\n  plain = utf8encode ? pidCryptUtil.encodeUTF8(str) : str;\n\n  c = plain.length % 3;  // pad string to length of multiple of 3\n  if (c > 0) { while (c++ < 3) { pad += '='; plain += '\\0'; } }\n  // note: doing padding here saves us doing special-case packing for trailing 1 or 2 chars\n\n  for (c=0; c<plain.length; c+=3) {  // pack three octets into four hexets\n    o1 = plain.charCodeAt(c);\n    o2 = plain.charCodeAt(c+1);\n    o3 = plain.charCodeAt(c+2);\n\n    bits = o1<<16 | o2<<8 | o3;\n\n    h1 = bits>>18 & 0x3f;\n    h2 = bits>>12 & 0x3f;\n    h3 = bits>>6 & 0x3f;\n    h4 = bits & 0x3f;\n\n    // use hextets to index into b64 string\n    e[c/3] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n  }\n  coded = e.join('');  // join() is far faster than repeated string concatenation\n\n  // replace 'A's from padded nulls with '='s\n  coded = coded.slice(0, coded.length-pad.length) + pad;\n  return coded;\n}\n\n/**\n * Decode string from Base64, as defined by RFC 4648 [http://tools.ietf.org/html/rfc4648]\n * As per RFC 4648, newlines are not catered for.\n *\n * @param utf8decode optional parameter, if set to true UTF-8 string is decoded\n *                   back into Unicode after conversion from base64\n * @return           decoded string\n */\npidCryptUtil.decodeBase64 = function(str,utf8decode) {\n  if(!str) str = \"\";\n  var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  utf8decode =  (typeof utf8decode == 'undefined') ? false : utf8decode;\n  var o1, o2, o3, h1, h2, h3, h4, bits, d=[], plain, coded;\n\n  coded = utf8decode ? pidCryptUtil.decodeUTF8(str) : str;\n\n  for (var c=0; c<coded.length; c+=4) {  // unpack four hexets into three octets\n    h1 = b64.indexOf(coded.charAt(c));\n    h2 = b64.indexOf(coded.charAt(c+1));\n    h3 = b64.indexOf(coded.charAt(c+2));\n    h4 = b64.indexOf(coded.charAt(c+3));\n\n    bits = h1<<18 | h2<<12 | h3<<6 | h4;\n\n    o1 = bits>>>16 & 0xff;\n    o2 = bits>>>8 & 0xff;\n    o3 = bits & 0xff;\n\n    d[c/4] = String.fromCharCode(o1, o2, o3);\n    // check for padding\n    if (h4 == 0x40) d[c/4] = String.fromCharCode(o1, o2);\n    if (h3 == 0x40) d[c/4] = String.fromCharCode(o1);\n  }\n  plain = d.join('');  // join() is far faster than repeated string concatenation\n\n  plain = utf8decode ? pidCryptUtil.decodeUTF8(plain) : plain\n\n  return plain;\n}\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters\n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @return encoded string\n */\npidCryptUtil.encodeUTF8 = function(str) {\n  if(!str) str = \"\";\n  // use regular expressions & String.replace callback function for better efficiency\n  // than procedural approaches\n  str = str.replace(\n      /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n      function(c) {\n        var cc = c.charCodeAt(0);\n        return String.fromCharCode(0xc0 | cc>>6, 0x80 | cc&0x3f); }\n    );\n  str = str.replace(\n      /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n      function(c) {\n        var cc = c.charCodeAt(0);\n        return String.fromCharCode(0xe0 | cc>>12, 0x80 | cc>>6&0x3F, 0x80 | cc&0x3f); }\n    );\n  return str;\n}\n\n// If you encounter problems with the UTF8 encode function (e.g. for use in a\n// Firefox) AddOn) you can use the following instead.\n// code from webtoolkit.com\n\n//pidCryptUtil.encodeUTF8 = function(str) {\n//\t\tstr = str.replace(/\\r\\n/g,\"\\n\");\n//\t\tvar utftext = \"\";\n//\n//\t\tfor (var n = 0; n < str.length; n++) {\n//\n//\t\t\tvar c = str.charCodeAt(n);\n//\n//\t\t\tif (c < 128) {\n//\t\t\t\tutftext += String.fromCharCode(c);\n//\t\t\t}\n//\t\t\telse if((c > 127) && (c < 2048)) {\n//\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);\n//\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n//\t\t\t}\n//\t\t\telse {\n//\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);\n//\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);\n//\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n//\t\t\t}\n//\n//\t\t}\n//\n//  return utftext;\n//}\n\n\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @return decoded string\n */\npidCryptUtil.decodeUTF8 = function(str) {\n  if(!str) str = \"\";\n  str = str.replace(\n      /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n      function(c) {  // (note parentheses for precence)\n        var cc = (c.charCodeAt(0)&0x1f)<<6 | c.charCodeAt(1)&0x3f;\n        return String.fromCharCode(cc); }\n    );\n  str = str.replace(\n      /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n      function(c) {  // (note parentheses for precence)\n        var cc = ((c.charCodeAt(0)&0x0f)<<12) | ((c.charCodeAt(1)&0x3f)<<6) | ( c.charCodeAt(2)&0x3f);\n        return String.fromCharCode(cc); }\n    );\n  return str;\n}\n\n// If you encounter problems with the UTF8 decode function (e.g. for use in a\n// Firefox) AddOn) you can use the following instead.\n// code from webtoolkit.com\n\n//pidCryptUtil.decodeUTF8 = function(utftext) {\n//    var str = \"\";\n//\t\tvar i = 0;\n//\t\tvar c = 0;\n//    var c1 = 0;\n//    var c2 = 0;\n//\n//\t\twhile ( i < utftext.length ) {\n//\n//\t\t\tc = utftext.charCodeAt(i);\n//\n//\t\t\tif (c < 128) {\n//\t\t\t\tstr += String.fromCharCode(c);\n//\t\t\t\ti++;\n//\t\t\t}\n//\t\t\telse if((c > 191) && (c < 224)) {\n//\t\t\t\tc1 = utftext.charCodeAt(i+1);\n//\t\t\t\tstr += String.fromCharCode(((c & 31) << 6) | (c1 & 63));\n//\t\t\t\ti += 2;\n//\t\t\t}\n//\t\t\telse {\n//\t\t\t\tc1 = utftext.charCodeAt(i+1);\n//\t\t\t\tc2 = utftext.charCodeAt(i+2);\n//\t\t\t\tstr += String.fromCharCode(((c & 15) << 12) | ((c1 & 63) << 6) | (c2 & 63));\n//\t\t\t\ti += 3;\n//\t\t\t}\n//\n//\t\t}\n//\n//\n//  return str;\n//}\n\n\n\n\n/**\n * Converts a string into a hexadecimal string\n * returns the characters of a string to their hexadecimal charcode equivalent\n * Works only on byte chars with charcode < 256. All others chars are converted\n * into \"xx\"\n *\n * @return hex string e.g. \"hello world\" => \"68656c6c6f20776f726c64\"\n */\npidCryptUtil.convertToHex = function(str) {\n  if(!str) str = \"\";\n  var hs ='';\n  var hv ='';\n  for (var i=0; i<str.length; i++) {\n    hv = str.charCodeAt(i).toString(16);\n    hs += (hv.length == 1) ? '0'+hv : hv;\n  }\n  return hs;\n}\n\n/**\n * Converts a hex string into a string\n * returns the characters of a hex string to their char of charcode\n *\n * @return hex string e.g. \"68656c6c6f20776f726c64\" => \"hello world\"\n */\npidCryptUtil.convertFromHex = function(str){\n  if(!str) str = \"\";\n  var s = \"\";\n  for(var i= 0;i<str.length;i+=2){\n    s += String.fromCharCode(parseInt(str.substring(i,i+2),16));\n  }\n  return s\n}\n\n/**\n * strips off all linefeeds from a string\n * returns the the strong without line feeds\n *\n * @return string\n */\npidCryptUtil.stripLineFeeds = function(str){\n  if(!str) str = \"\";\n//  var re = RegExp(String.fromCharCode(13),'g');//\\r\n//  var re = RegExp(String.fromCharCode(10),'g');//\\n\n  var s = '';\n  s = str.replace(/\\n/g,'');\n  s = s.replace(/\\r/g,'');\n  return s;\n}\n\n/**\n * Converts a string into an array of char code bytes\n * returns the characters of a hex string to their char of charcode\n *\n * @return hex string e.g. \"68656c6c6f20776f726c64\" => \"hello world\"\n */\n pidCryptUtil.toByteArray = function(str){\n  if(!str) str = \"\";\n  var ba = [];\n  for(var i=0;i<str.length;i++)\n     ba[i] = str.charCodeAt(i);\n\n  return ba;\n}\n\n\n/**\n * Fragmentize a string into lines adding a line feed (lf) every length\n * characters\n *\n * @return string e.g. length=3 \"abcdefghi\" => \"abc\\ndef\\nghi\\n\"\n */\npidCryptUtil.fragment = function(str,length,lf){\n  if(!str) str = \"\";\n  if(!length || length>=str.length) return str;\n  if(!lf) lf = '\\n'\n  var tmp='';\n  for(var i=0;i<str.length;i+=length)\n    tmp += str.substr(i,length) + lf;\n  return tmp;\n}\n\n/**\n * Formats a hex string in two lower case chars + : and lines of given length\n * characters\n *\n * @return string e.g. \"68656C6C6F20\" => \"68:65:6c:6c:6f:20:\\n\"\n*/\npidCryptUtil.formatHex = function(str,length){\n  if(!str) str = \"\";\n    if(!length) length = 45;\n    var str_new='';\n    var j = 0;\n    var hex = str.toLowerCase();\n    for(var i=0;i<hex.length;i+=2)\n      str_new += hex.substr(i,2) +':';\n    hex = this.fragment(str_new,length);\n\n  return hex;\n}\n\n\n/*----------------------------------------------------------------------------*/\n/* End of intance methods of the String object                                */\n/*----------------------------------------------------------------------------*/\n\npidCryptUtil.byteArray2String = function(b){\n//  var out ='';\n  var s = '';\n  for(var i=0;i<b.length;i++){\n     s += String.fromCharCode(b[i]);\n//     out += b[i]+':';\n  }\n//  alert(out);\n  return s;\n}\n\nmodule.exports = pidCryptUtil;\n","module.exports = require(\"./pidcrypt.js\");\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.loading)?_c('Loader',{attrs:{\"size\":7}}):_c('div',{staticClass:\"d-flex flex-column align-items-center\"},[_c('b-list-group-item',{staticClass:\"name-item\"},[_c('b-avatar',{staticClass:\"mr-3\",attrs:{\"src\":_vm.infoUsers[_vm.friendId].avatar,\"to\":\"/profile/\" + _vm.friendId}}),_c('h3',{staticClass:\"mr-auto\"},[_vm._v(_vm._s(_vm.user.name))])],1),_c('div',{staticClass:\"d-flex flex-column align-items-center messages-wrap\"},[_c('b-card',{staticClass:\"messages-frame flex-column d-flex\",attrs:{\"id\":\"scrollDown\"}},_vm._l((_vm.dialogInfo.messages),function(message){return _c('b-list-group-item',{key:message.crypted,staticClass:\"d-flex align-items-center message\",attrs:{\"id\":message.id || ''}},[_c('b-avatar',{staticClass:\"mr-3\",attrs:{\"src\":_vm.infoUsers[message.whoSend].avatar,\"to\":'/profile/' + message.whoSend}}),_c('span',{staticClass:\"mr-auto\"},[_vm._v(_vm._s(message.message))])],1)}),1),_c('form',{staticClass:\"w-100\",on:{\"submit\":function($event){$event.preventDefault();return _vm.sendMessage($event)}}},[_c('b-input-group',{staticClass:\"mt-3\"},[_c('b-form-input',{model:{value:(_vm.message),callback:function ($$v) {_vm.message=(typeof $$v === 'string'? $$v.trim(): $$v)},expression:\"message\"}}),_c('b-input-group-append',[_c('b-button',{attrs:{\"variant\":\"primary\",\"type\":\"submit\"}},[_vm._v(\"Отправить\")])],1)],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <Loader v-if=\"loading\" :size=\"7\"/>\r\n    <div class=\"d-flex flex-column align-items-center\" v-else >\r\n        <b-list-group-item class=\"name-item\">\r\n            <b-avatar class=\"mr-3\"\r\n                      :src=\"infoUsers[friendId].avatar\"\r\n                      :to=\"`/profile/` + friendId\"></b-avatar>\r\n            <h3 class=\"mr-auto\">{{user.name}}</h3>\r\n        </b-list-group-item>\r\n        <div class=\"d-flex flex-column align-items-center messages-wrap\">\r\n            <b-card id=\"scrollDown\" class=\"messages-frame flex-column d-flex\">\r\n                <b-list-group-item :id=\"message.id || ''\" class=\"d-flex align-items-center message\" v-for=\"message in dialogInfo.messages\"\r\n                                   :key=\"message.crypted\">\r\n                    <b-avatar class=\"mr-3\" :src=\"infoUsers[message.whoSend].avatar\"\r\n                              :to=\"'/profile/' + message.whoSend\"></b-avatar>\r\n                    <span class=\"mr-auto\">{{message.message}}</span>\r\n                </b-list-group-item>\r\n            </b-card>\r\n            <form class=\"w-100\" @submit.prevent=\"sendMessage\">\r\n                <b-input-group class=\"mt-3\">\r\n                    <b-form-input v-model.trim=\"message\"></b-form-input>\r\n                    <b-input-group-append>\r\n                        <b-button variant=\"primary\" type=\"submit\">Отправить</b-button>\r\n                    </b-input-group-append>\r\n                </b-input-group>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import pidCrypt from 'pidcrypt'\r\n    import 'pidcrypt/aes_cbc'\r\n    import 'pidcrypt/pidcrypt_util'\r\n    import firebase from 'firebase'\r\n\r\n    export default {\r\n        name: \"Dialog\",\r\n        data: () => ({\r\n            message: '',\r\n            id: '',\r\n            user: '',\r\n            dialogInfo: {},\r\n            uid: '',\r\n            friendId: '',\r\n            avatar: '',\r\n            infoUsers: {},\r\n            loading: true\r\n        }),\r\n        async mounted() {\r\n            try {\r\n                const aes = new pidCrypt.AES.CBC()\r\n                this.id = this.$route.params.id\r\n                this.dialogInfo = await this.$store.dispatch('getDialogInfo', this.id)\r\n                this.$store.commit('setMessages', {\r\n                    messages: this.dialogInfo.messages ? this.dialogInfo.messages : [],\r\n                    id: this.id\r\n                })\r\n                this.dialogInfo = {\r\n                    messages: this.dialogInfo.messages ? this.dialogInfo.messages.map((el, index) => ({\r\n                        message: aes.decryptText(this.dialogInfo.messages[index].message, process.env.KEY_OF_MESSAGE, {nBits: 256}),\r\n                        whoSend: this.dialogInfo.messages[index].whoSend,\r\n                        crypted: this.dialogInfo.messages[index].message,\r\n                    })) : [],\r\n                    user1Id: this.dialogInfo.user1Id,\r\n                    user2Id: this.dialogInfo.user2Id\r\n                }\r\n                if (this.dialogInfo.messages.length > 0) {\r\n                    this.dialogInfo.messages[this.dialogInfo.messages.length - 1].id = 'lastMessage'\r\n                }\r\n                this.uid = await this.$store.dispatch('getUid')\r\n                this.friendId = this.dialogInfo.user1Id === this.uid ? this.dialogInfo.user2Id : this.dialogInfo.user1Id\r\n                this.infoUsers[this.dialogInfo.user1Id] = {}\r\n                this.infoUsers[this.dialogInfo.user2Id] = {}\r\n                this.user = this.dialogInfo.user1Id === this.uid ? (await this.$store.dispatch('getInfo', this.dialogInfo.user2Id)) : (await this.$store.dispatch('getInfo', this.dialogInfo.user1Id))\r\n                this.infoUsers[this.dialogInfo.user1Id].avatar = await this.$store.dispatch('getAvatar', this.dialogInfo.user1Id)\r\n                this.infoUsers[this.dialogInfo.user2Id].avatar = await this.$store.dispatch('getAvatar', this.dialogInfo.user2Id)\r\n                firebase.database().ref(`dialogs/${this.id}`).on('value', (snap) => {\r\n                    this.dialogInfo = snap.val()\r\n                    this.$store.commit('setMessages', {\r\n                        messages: this.dialogInfo.messages ? this.dialogInfo.messages : [],\r\n                        id: this.id\r\n                    })\r\n                    this.dialogInfo = {\r\n                        messages: this.dialogInfo.messages ? this.dialogInfo.messages.map((el, index) => ({\r\n                            message: aes.decryptText(this.dialogInfo.messages[index].message, process.env.KEY_OF_MESSAGE, {nBits: 256}),\r\n                            whoSend: this.dialogInfo.messages[index].whoSend,\r\n                            crypted: this.dialogInfo.messages[index].message\r\n                        })) : [],\r\n                        user1Id: this.dialogInfo.user1Id,\r\n                        user2Id: this.dialogInfo.user2Id\r\n                    }\r\n                    if (this.dialogInfo.messages.length > 0) {\r\n                        this.dialogInfo.messages[this.dialogInfo.messages.length - 1].id = 'lastMessage'\r\n                    }\r\n                    this.$scrollTo('#lastMessage', 1, {\r\n                        container: '.card-body',\r\n                        duration: 500,\r\n                        easing: \"ease\",\r\n                        offset: 0,\r\n                        force: true,\r\n                        cancelable: true,\r\n                        onStart: false,\r\n                        onDone: false,\r\n                        onCancel: false,\r\n                        x: false,\r\n                        y: true\r\n                    })\r\n                })\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n            this.loading = false\r\n            this.$nextTick(() => {\r\n                this.$scrollTo('#lastMessage', 1, {\r\n                    container: '.card-body',\r\n                    duration: 500,\r\n                    easing: \"ease\",\r\n                    offset: 0,\r\n                    force: true,\r\n                    cancelable: true,\r\n                    onStart: false,\r\n                    onDone: false,\r\n                    onCancel: false,\r\n                    x: false,\r\n                    y: true\r\n                })\r\n            })\r\n        },\r\n        computed: {\r\n            name(id) {\r\n                return this.infoUsers[id].name\r\n            }\r\n        },\r\n        methods: {\r\n            async sendMessage() {\r\n                try {\r\n                    const aes = new pidCrypt.AES.CBC()\r\n                    const uid = await this.$store.dispatch('getUid')\r\n                    const cryptedMessage = aes.encryptText(this.message, process.env.KEY_OF_MESSAGES, {nBits: 256})\r\n                    this.$store.commit('addMessage', {\r\n                        message: cryptedMessage,\r\n                        id: this.id,\r\n                        whoSend: uid\r\n                    })\r\n                    this.message = ''\r\n                    this.dialogInfo.messages = this.$store.getters.messages[this.id].messages\r\n                    this.dialogInfo = {\r\n                        messages: this.dialogInfo.messages ? this.dialogInfo.messages.map((el, index) => ({\r\n                            message: aes.decryptText(this.dialogInfo.messages[index].message, process.env.KEY_OF_MESSAGE, {nBits: 256}),\r\n                            whoSend: this.dialogInfo.messages[index].whoSend,\r\n                            crypted: this.dialogInfo.messages[index].message\r\n                        })) : [],\r\n                        user1Id: this.dialogInfo.user1Id,\r\n                        user2Id: this.dialogInfo.user2Id\r\n                    }\r\n                    await this.$store.dispatch('addMessage', this.id)\r\n                } catch (e) {\r\n                    console.log(e)\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Dialog.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Dialog.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Dialog.vue?vue&type=template&id=aebaad5c&scoped=true&\"\nimport script from \"./Dialog.vue?vue&type=script&lang=js&\"\nexport * from \"./Dialog.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"aebaad5c\",\n  null\n  \n)\n\nexport default component.exports","/*!Copyright (c) 2009 pidder <www.pidder.com>*/\n/*----------------------------------------------------------------------------*/\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as\n// published by the Free Software Foundation; either version 3 of the\n// License, or (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n// 02111-1307 USA or check at http://www.gnu.org/licenses/gpl.html\n\n/*----------------------------------------------------------------------------*/\n/*\n*  pidCrypt AES core implementation for block en-/decryption for use in pidCrypt\n*  Library.\n*  Derived from jsaes version 0.1 (See original license below)\n*  Only minor Changes (e.g. using a precompiled this.SBoxInv) and port to an\n*  AES Core Class for use with different AES modes.\n*\n*  Depends on pidCrypt (pidcrypt.js, pidcrypt_util.js)\n/*----------------------------------------------------------------------------*/\n/*    jsaes version 0.1  -  Copyright 2006 B. Poettering\n *    http://point-at-infinity.org/jsaes/\n *    Report bugs to: jsaes AT point-at-infinity.org\n *\n *\n * This is a javascript implementation of the AES block cipher. Key lengths\n * of 128, 192 and 256 bits are supported.\n * The well-functioning of the encryption/decryption routines has been\n * verified for different key lengths with the test vectors given in\n * FIPS-197, Appendix C.\n * The following code example enciphers the plaintext block '00 11 22 .. EE FF'\n * with the 256 bit key '00 01 02 .. 1E 1F'.\n *    AES_Init();\n *    var block = new Array(16);\n *    for(var i = 0; i < 16; i++)\n *        block[i] = 0x11 * i;\n *    var key = new Array(32);\n *    for(var i = 0; i < 32; i++)\n *        key[i] = i;\n *    AES_ExpandKey(key);\n *    AES_Encrypt(block, key);\n *    AES_Done();\n/*----------------------------------------------------------------------------*/\nvar pidCrypt = require('./pidcrypt.js');\n\nif(typeof(pidCrypt) != 'undefined'){\n  pidCrypt.AES = function(env) {\n    this.env = (env) ? env : new pidCrypt();\n    this.blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\n    this.ShiftRowTabInv; //initialized by init()\n    this.xtime; //initialized by init()\n    this.SBox = new Array(\n      99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,\n      118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,\n      147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,\n      7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,\n      47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,\n      251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,\n      188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,\n      100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,\n      50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,\n      78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,\n      116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,\n      158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,\n      137,13,191,230,66,104,65,153,45,15,176,84,187,22\n    );\n    this.SBoxInv = new Array(\n      82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,\n      251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,\n      166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,\n      162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,\n      182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,\n      171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,\n      175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,\n      230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,\n      26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,\n      154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,\n      128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,\n      59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,\n      225,105,20,99,85,33,12,125\n    );\n    this.ShiftRowTab = new Array(0,5,10,15,4,9,14,3,8,13,2,7,12,1,6,11);\n  }\n/*\ninit: initialize the tables needed at runtime. Call this function\nbefore the (first) key expansion.\n*/\n  pidCrypt.AES.prototype.init = function() {\n    this.env.setParams({blockSize:this.blockSize});\n    this.ShiftRowTabInv = new Array(16);\n    for(var i = 0; i < 16; i++)\n      this.ShiftRowTabInv[this.ShiftRowTab[i]] = i;\n    this.xtime = new Array(256);\n    for(i = 0; i < 128; i++) {\n      this.xtime[i] = i << 1;\n      this.xtime[128 + i] = (i << 1) ^ 0x1b;\n    }\n  }\n/*\nAES_ExpandKey: expand a cipher key. Depending on the desired encryption\nstrength of 128, 192 or 256 bits 'key' has to be a byte array of length\n16, 24 or 32, respectively. The key expansion is done \"in place\", meaning\nthat the array 'key' is modified.\n*/\n  pidCrypt.AES.prototype.expandKey = function(input) {\n    var key = input.slice();\n    var kl = key.length, ks, Rcon = 1;\n    switch (kl) {\n      case 16: ks = 16 * (10 + 1); break;\n      case 24: ks = 16 * (12 + 1); break;\n      case 32: ks = 16 * (14 + 1); break;\n      default:\n        alert(\"AESCore.expandKey: Only key lengths of 16, 24 or 32 bytes allowed!\");\n    }\n    for(var i = kl; i < ks; i += 4) {\n      var temp = key.slice(i - 4, i);\n      if (i % kl == 0) {\n        temp = new Array(this.SBox[temp[1]] ^ Rcon, this.SBox[temp[2]],\n                         this.SBox[temp[3]], this.SBox[temp[0]]);\n        if ((Rcon <<= 1) >= 256)\n          Rcon ^= 0x11b;\n      }\n      else if ((kl > 24) && (i % kl == 16))\n        temp = new Array(this.SBox[temp[0]], this.SBox[temp[1]],\n      this.SBox[temp[2]], this.SBox[temp[3]]);\n      for(var j = 0; j < 4; j++)\n        key[i + j] = key[i + j - kl] ^ temp[j];\n    }\n    return key;\n  }\n/*\nAES_Encrypt: encrypt the 16 byte array 'block' with the previously\nexpanded key 'key'.\n*/\n  pidCrypt.AES.prototype.encrypt = function(input, key) {\n    var l = key.length;\n    var block = input.slice();\n    this.addRoundKey(block, key.slice(0, 16));\n    for(var i = 16; i < l - 16; i += 16) {\n      this.subBytes(block);\n      this.shiftRows(block);\n      this.mixColumns(block);\n      this.addRoundKey(block, key.slice(i, i + 16));\n    }\n    this.subBytes(block);\n    this.shiftRows(block);\n    this.addRoundKey(block, key.slice(i, l));\n\n    return block;\n  }\n/*\nAES_Decrypt: decrypt the 16 byte array 'block' with the previously\nexpanded key 'key'.\n*/\n  pidCrypt.AES.prototype.decrypt = function(input, key) {\n    var l = key.length;\n    var block = input.slice();\n    this.addRoundKey(block, key.slice(l - 16, l));\n    this.shiftRows(block, 1);//1=inverse operation\n    this.subBytes(block, 1);//1=inverse operation\n    for(var i = l - 32; i >= 16; i -= 16) {\n      this.addRoundKey(block, key.slice(i, i + 16));\n      this.mixColumns_Inv(block);\n      this.shiftRows(block, 1);//1=inverse operation\n      this.subBytes(block, 1);//1=inverse operation\n    }\n    this.addRoundKey(block, key.slice(0, 16));\n\n    return block;\n  }\n  pidCrypt.AES.prototype.subBytes = function(state, inv) {\n    var box = (typeof(inv) == 'undefined') ? this.SBox.slice() : this.SBoxInv.slice();\n    for(var i = 0; i < 16; i++)\n      state[i] = box[state[i]];\n  }\n  pidCrypt.AES.prototype.addRoundKey = function(state, rkey) {\n    for(var i = 0; i < 16; i++)\n      state[i] ^= rkey[i];\n  }\n  pidCrypt.AES.prototype.shiftRows = function(state, inv) {\n    var shifttab = (typeof(inv) == 'undefined') ? this.ShiftRowTab.slice() : this.ShiftRowTabInv.slice();\n    var h = new Array().concat(state);\n    for(var i = 0; i < 16; i++)\n      state[i] = h[shifttab[i]];\n  }\n  pidCrypt.AES.prototype.mixColumns = function(state) {\n    for(var i = 0; i < 16; i += 4) {\n      var s0 = state[i + 0], s1 = state[i + 1];\n      var s2 = state[i + 2], s3 = state[i + 3];\n      var h = s0 ^ s1 ^ s2 ^ s3;\n      state[i + 0] ^= h ^ this.xtime[s0 ^ s1];\n      state[i + 1] ^= h ^ this.xtime[s1 ^ s2];\n      state[i + 2] ^= h ^ this.xtime[s2 ^ s3];\n      state[i + 3] ^= h ^ this.xtime[s3 ^ s0];\n    }\n  }\n  pidCrypt.AES.prototype.mixColumns_Inv = function(state) {\n    for(var i = 0; i < 16; i += 4) {\n      var s0 = state[i + 0], s1 = state[i + 1];\n      var s2 = state[i + 2], s3 = state[i + 3];\n      var h = s0 ^ s1 ^ s2 ^ s3;\n      var xh = this.xtime[h];\n      var h1 = this.xtime[this.xtime[xh ^ s0 ^ s2]] ^ h;\n      var h2 = this.xtime[this.xtime[xh ^ s1 ^ s3]] ^ h;\n      state[i + 0] ^= h1 ^ this.xtime[s0 ^ s1];\n      state[i + 1] ^= h2 ^ this.xtime[s1 ^ s2];\n      state[i + 2] ^= h1 ^ this.xtime[s2 ^ s3];\n      state[i + 3] ^= h2 ^ this.xtime[s3 ^ s0];\n    }\n  }\n// xor the elements of two arrays together\n  pidCrypt.AES.prototype.xOr_Array = function( a1, a2 ){\n     var i;\n     var res = Array();\n     for( i=0; i<a1.length; i++ )\n        res[i] = a1[i] ^ a2[i];\n\n     return res;\n  }\n  pidCrypt.AES.prototype.getCounterBlock = function(){\n    // initialise counter block (NIST SP800-38A §B.2): millisecond time-stamp for nonce in 1st 8 bytes,\n    // block counter in 2nd 8 bytes\n    var ctrBlk = new Array(this.blockSize);\n    var nonce = (new Date()).getTime();  // timestamp: milliseconds since 1-Jan-1970\n    var nonceSec = Math.floor(nonce/1000);\n    var nonceMs = nonce%1000;\n    // encode nonce with seconds in 1st 4 bytes, and (repeated) ms part filling 2nd 4 bytes\n    for (var i=0; i<4; i++) ctrBlk[i] = (nonceSec >>> i*8) & 0xff;\n    for (var i=0; i<4; i++) ctrBlk[i+4] = nonceMs & 0xff;\n    \n   return ctrBlk.slice();\n  }\n}\n","/*!Copyright (c) 2009-2015 pidder, https://www.pidder.de\t\t\t\t\t\t\t\t\t\t\t*/\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as\n// published by the Free Software Foundation; either version 2 of the\n// License, or (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n// 02111-1307 USA or check at http://www.gnu.org/licenses/gpl.html\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* pidCrypt is pidders JavaScript Crypto Library - https://www.pidder.de/pidcrypt\n * Version 0.06, 01/2015\n *\n * pidCrypt is a combination of different JavaScript functions for client side\n * encryption technologies with enhancements for openssl compatibility cast into\n * a modular class concept.\n *\n * Client side encryption is a must have for developing host proof applications:\n * There must be no knowledge of the clear text data at the server side, all\n * data is enrycpted prior to being submitted to the server.\n * Client side encryption is mandatory for protecting the privacy of the users.\n * \"Dont't trust us, check our source code!\"\n *\n * \"As a cryptography and computer security expert, I have never understood\n * the current fuss about the open source software movement. In the\n * cryptography world, we consider open source necessary for good security;\n * we have for decades. Public security is always more secure than proprietary\n * security. It's true for cryptographic algorithms, security protocols, and\n * security source code. For us, open source isn't just a business model;\n * it's smart engineering practice.\"\n * Bruce Schneier, Crypto-Gram 1999/09/15\n * copied form keepassx site - keepassx is a cross plattform password manager\n *\n * pidCrypt comes with modules under different licenses and copyright terms.\n * Make sure that you read and respect the individual module license conditions\n * before using it.\n *\n * The pidCrypt base library contains:\n * 1. pidcrypt.js\n *    class pidCrypt: the base class of the library\n * 2. pidcrypt_util.js\n *    base64 en-/decoding as new methods of the JavaScript String class\n *    UTF8 en-/decoding as new methods of the JavaScript String class\n *    String/HexString conversions as new methods of the JavaScript String class\n *\n * The pidCrypt modules and the original authors (see files for detailed\n * copyright and license terms) are:\n *\n * - md5.js:      \tMD5 (Message-Digest Algorithm), www.webtoolkit.info\n * - aes_core.js: \tAES (Advanced Encryption Standard ) Core algorithm, B. Poettering\n * - aes-ctr.js:  \tAES CTR (Counter) Mode, Chis Veness\n * - aes-cbc.js:  \tAES CBC (Cipher Block Chaining) Mode, pidder\n * - jsbn.js:     \tBigInteger for JavaScript, Tom Wu\n * - prng.js:     \tPRNG (Pseudo-Random Number Generator), Tom Wu\n * - rng.js:      \tRandom Numbers, Tom Wu\n * - rsa.js:      \tRSA (Rivest, Shamir, Adleman Algorithm), Tom Wu\n * - oids.js:     \toids (Object Identifiers found in ASN.1), Peter Gutmann\n * - asn1.js:     \tASN1 (Abstract Syntax Notation One) parser, Lapo Luchini\n * - sha256.js    \tSHA-256 hashing, Angel Marin \n * - sha2.js:     \tSHA-384 and SHA-512 hashing, Brian Turek\n * - seedrandom.js\tseeded random number generator, David Bau\n *\n * IMPORTANT:\n * Please report any bugs at https://sourceforge.net/projects/pidcrypt/\n * Vist https://www.pidder.de/pidcrypt for online demo and documentation\n */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar pidCryptUtil = require('./pidcrypt_util.js');\n\nfunction pidCrypt(){\n  function getRandomBytes(len){\n/* for better randomness make sure you incorporate and initiate seedrandom.js \n*  before using getRandomBytes() or any call of Math.random()\n*/  \n    if(!len) len = 8;\n    var bytes = new Array(len);\n    var field = [];\n    for(var i=0;i<256;i++) field[i] = i;\n    for(i=0;i<bytes.length;i++)\n      bytes[i] = field[Math.floor(Math.random()*field.length)];\n    return bytes\n  }\n\n  this.setDefaults = function(){\n     this.params.nBits = 256;\n  //salt should always be a Hex String e.g. AD0E76FF6535AD...\n     this.params.salt = pidCryptUtil.convertToHex(pidCryptUtil.byteArray2String(getRandomBytes(8)));\n     this.params.blockSize = 16;\n     this.params.UTF8 = true;\n     this.params.A0_PAD = true;\n  }\n\n  this.debug = true;\n  this.params = {};\n  //setting default values for params\n  this.params.dataIn = '';\n  this.params.dataOut = '';\n  this.params.decryptIn = '';\n  this.params.decryptOut = '';\n  this.params.encryptIn = '';\n  this.params.encryptOut = '';\n  //key should always be a Hex String e.g. AD0E76FF6535AD...\n  this.params.key = '';\n  //iv should always be a Hex String e.g. AD0E76FF6535AD...\n  this.params.iv = '';\n  this.params.clear = true;\n  this.setDefaults();\n  this.errors = '';\n  this.warnings = '';\n  this.infos = '';\n  this.debugMsg = '';\n  //set and get methods for base class\n  this.setParams = function(pObj){\n    if(!pObj) pObj = {};\n    for(var p in pObj)\n      this.params[p] = pObj[p];\n  }\n  this.getParams = function(){\n    return this.params;\n  }\n  this.getParam = function(p){\n    return this.params[p] || '';\n  }\n  this.clearParams = function(){\n      this.params= {};\n  }\n  this.getNBits = function(){\n    return this.params.nBits;\n  }\n  this.getOutput = function(){\n    return this.params.dataOut;\n  }\n  this.setError = function(str){\n    this.error = str;\n  }\n  this.appendError = function(str){\n    this.errors += str;\n    return '';\n  }\n  this.getErrors = function(){\n    return this.errors;\n  }\n  this.isError = function(){\n    if(this.errors.length>0)\n      return true;\n    return false\n  }\n  this.appendInfo = function(str){\n    this.infos += str;\n    return '';\n  }\n  this.getInfos = function()\n  {\n    return this.infos;\n  }\n  this.setDebug = function(flag){\n    this.debug = flag;\n  }\n  this.appendDebug = function(str)\n  {\n    this.debugMsg += str;\n    return '';\n  }\n  this.isDebug = function(){\n    return this.debug;\n  }\n  this.getAllMessages = function(options){\n    var defaults = {lf:'\\n',\n                    clr_mes: false,\n                    verbose: 15//verbose level bits = 1111\n        };\n    if(!options) options = defaults;\n    for(var d in defaults)\n      if(typeof(options[d]) == 'undefined') options[d] = defaults[d];\n    var mes = '';\n    var tmp = '';\n    for(var p in this.params){\n      switch(p){\n        case 'encryptOut':\n          tmp = this.params[p].toString().toByteArray();\n          tmp = tmp.join().fragment(64, options.lf)\n          break;\n        case 'key': \n        case 'iv':\n          tmp = this.params[p].formatHex(48);\n          break;\n        default:\n          tmp = this.params[p].toString().fragment(64, options.lf);\n      }  \n      mes += '<p><b>'+p+'</b>:<pre>' + tmp + '</pre></p>';\n    }  \n    if(this.debug) mes += 'debug: ' + this.debug + options.lf;\n    if(this.errors.length>0 && ((options.verbose & 1) == 1)) mes += 'Errors:' + options.lf + this.errors + options.lf;\n    if(this.warnings.length>0 && ((options.verbose & 2) == 2)) mes += 'Warnings:' +options.lf + this.warnings + options.lf;\n    if(this.infos.length>0 && ((options.verbose & 4) == 4)) mes += 'Infos:' +options.lf+ this.infos + options.lf;\n    if(this.debug && ((options.verbose & 8) == 8)) mes += 'Debug messages:' +options.lf+ this.debugMsg + options.lf;\n    if(options.clr_mes)\n      this.errors = this.infos = this.warnings = this.debug = '';\n    return mes;\n  }\n  this.getRandomBytes = function(len){\n    return getRandomBytes(len);\n  }\n  //TODO warnings\n}\n\nmodule.exports = pidCrypt;\n"," /*----------------------------------------------------------------------------*/\n // Copyright (c) 2009 pidder <www.pidder.com>\n // Permission to use, copy, modify, and/or distribute this software for any\n // purpose with or without fee is hereby granted, provided that the above\n // copyright notice and this permission notice appear in all copies.\n //\n // THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n // WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n // MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n // ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n // WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*----------------------------------------------------------------------------*/\n/*\n*  AES CBC (Cipher Block Chaining) Mode for use in pidCrypt Library\n*  The pidCrypt AES CBC mode is compatible with openssl aes-xxx-cbc mode\n*  using the same algorithms for key and iv creation and padding as openssl.\n*\n*  Depends on pidCrypt (pidcrypt.js, pidcrypt_util.js), AES (aes_core.js)\n*  and MD5 (md5.js)\n*\n/*----------------------------------------------------------------------------*/\n\nvar pidCrypt = require('./pidcrypt.js');\nvar pidCryptUtil = require('./pidcrypt_util.js');\n\nrequire('./md5.js');\nrequire('./aes_core.js');\n\n\nif(typeof(pidCrypt) != 'undefined' &&\n   typeof(pidCrypt.AES) != 'undefined' &&\n   typeof(pidCrypt.MD5) != 'undefined')\n{\n  pidCrypt.AES.CBC = function () {\n    this.pidcrypt = new pidCrypt();\n    this.aes = new pidCrypt.AES(this.pidcrypt);\n    //shortcuts to pidcrypt methods\n    this.getOutput = function(){\n      return this.pidcrypt.getOutput();\n    }\n    this.getAllMessages = function(lnbrk){\n      return this.pidcrypt.getAllMessages(lnbrk);\n    }\n    this.isError = function(){\n      return this.pidcrypt.isError();\n    }\n  }\n/**\n* Initialize CBC for encryption from password.\n* Note: Only for encrypt operation!\n* @param  password: String\n* @param  options {\n*           nBits: aes bit size (128, 192 or 256)\n*         }\n*/\n  pidCrypt.AES.CBC.prototype.init = function(password, options) {\n    if(!options) options = {};\n    var pidcrypt = this.pidcrypt;\n    pidcrypt.setDefaults();\n    var pObj = this.pidcrypt.getParams(); //loading defaults\n    for(var o in options)\n      pObj[o] = options[o];\n    var k_iv = this.createKeyAndIv({password:password, salt: pObj.salt, bits: pObj.nBits});\n    pObj.key = k_iv.key;\n    pObj.iv = k_iv.iv;\n    pObj.dataOut = '';\n    pidcrypt.setParams(pObj)\n    this.aes.init();\n  }\n\n/**\n* Initialize CBC for encryption from password.\n* @param  dataIn: plain text\n* @param  password: String\n* @param  options {\n*           nBits: aes bit size (128, 192 or 256)\n*         }\n*/\n  pidCrypt.AES.CBC.prototype.initEncrypt = function(dataIn, password, options) {\n    this.init(password,options);//call standard init\n    this.pidcrypt.setParams({dataIn:dataIn, encryptIn: pidCryptUtil.toByteArray(dataIn)})//setting input for encryption\n  }\n/**\n* Initialize CBC for decryption from encrypted text (compatible with openssl).\n* see thread http://thedotnet.com/nntp/300307/showpost.aspx\n* @param  crypted: base64 encoded aes encrypted text\n* @param  passwd: String\n* @param  options {\n*           nBits: aes bit size (128, 192 or 256),\n*           UTF8: boolean, set to false when decrypting certificates,\n*           A0_PAD: boolean, set to false when decrypting certificates\n*         }\n*/\n  pidCrypt.AES.CBC.prototype.initDecrypt = function(crypted, password, options){\n    if(!options) options = {};\n    var pidcrypt = this.pidcrypt;\n    pidcrypt.setParams({dataIn:crypted})\n    if(!password)\n      pidcrypt.appendError('pidCrypt.AES.CBC.initFromEncryption: Sorry, can not crypt or decrypt without password.\\n');\n    var ciphertext = pidCryptUtil.decodeBase64(crypted);\n    if(ciphertext.indexOf('Salted__') != 0)\n      pidcrypt.appendError('pidCrypt.AES.CBC.initFromCrypt: Sorry, unknown encryption method.\\n');\n    var salt = ciphertext.substr(8,8);//extract salt from crypted text\n    options.salt = pidCryptUtil.convertToHex(salt);//salt is always hex string\n    this.init(password,options);//call standard init\n    ciphertext = ciphertext.substr(16);\n    pidcrypt.setParams({decryptIn:pidCryptUtil.toByteArray(ciphertext)})\n  }\n/**\n* Init CBC En-/Decryption from given parameters.\n* @param  input: plain text or base64 encrypted text\n* @param  key: HEX String (16, 24 or 32 byte)\n* @param  iv: HEX String (16 byte)\n* @param  options {\n*           salt: array of bytes (8 byte),\n*           nBits: aes bit size (128, 192 or 256)\n*         }\n*/\n  pidCrypt.AES.CBC.prototype.initByValues = function(dataIn, key, iv, options){\n    var pObj = {};\n    this.init('',options);//empty password, we are setting key, iv manually\n    pObj.dataIn = dataIn;\n    pObj.key = key\n    pObj.iv = iv\n    this.pidcrypt.setParams(pObj)\n  }\n\n  pidCrypt.AES.CBC.prototype.getAllMessages = function(lnbrk){\n    return this.pidcrypt.getAllMessages(lnbrk);\n  }\n/**\n* Creates key of length nBits and an iv form password+salt\n* compatible to openssl.\n* See thread http://thedotnet.com/nntp/300307/showpost.aspx\n*\n* @param  pObj {\n*    password: password as String\n*    [salt]: salt as String, default 8 byte random salt\n*    [bits]: no of bits, default pidCrypt.params.nBits = 256\n* }\n*\n* @return         {iv: HEX String, key: HEX String}\n*/\n  pidCrypt.AES.CBC.prototype.createKeyAndIv = function(pObj){\n    var pidcrypt = this.pidcrypt;\n    var retObj = {};\n    var count = 1;//openssl rounds\n    var miter = \"3\";\n    if(!pObj) pObj = {};\n    if(!pObj.salt) {\n      pObj.salt = pidcrypt.getRandomBytes(8);\n      pObj.salt = pidCryptUtil.convertToHex(pidCryptUtil.byteArray2String(pObj.salt));\n      pidcrypt.setParams({salt: pObj.salt});\n    }\n    var data00 = pObj.password + pidCryptUtil.convertFromHex(pObj.salt);\n    var hashtarget = '';\n    var result = '';\n    var keymaterial = [];\n    var loop = 0;\n    keymaterial[loop++] = data00;\n    for(var j=0; j<miter; j++){\n      if(j == 0)\n        result = data00;   \t//initialize\n      else {\n        hashtarget = pidCryptUtil.convertFromHex(result);\n        hashtarget += data00;\n        result = hashtarget;\n      }\n      for(var c=0; c<count; c++){\n        result = pidCrypt.MD5(result);\n      }\n      keymaterial[loop++] = result;\n    }\n    switch(pObj.bits){\n      case 128://128 bit\n        retObj.key = keymaterial[1];\n        retObj.iv = keymaterial[2];\n        break;\n      case 192://192 bit\n        retObj.key = keymaterial[1] + keymaterial[2].substr(0,16);\n        retObj.iv = keymaterial[3];\n        break;\n      case 256://256 bit\n        retObj.key = keymaterial[1] + keymaterial[2];\n        retObj.iv = keymaterial[3];\n        break;\n       default:\n         pidcrypt.appendError('pidCrypt.AES.CBC.createKeyAndIv: Sorry, only 128, 192 and 256 bits are supported.\\nBits('+typeof(pObj.bits)+') = '+pObj.bits);\n    }\n    return retObj;\n  }\n/**\n* Encrypt a text using AES encryption in CBC mode of operation\n*  - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\n*\n* one of the pidCrypt.AES.CBC init funtions must be called before execution\n*\n* @param  byteArray: text to encrypt as array of bytes\n*\n* @return aes-cbc encrypted text\n*/\n  pidCrypt.AES.CBC.prototype.encryptRaw = function(byteArray) {\n    var pidcrypt = this.pidcrypt;\n    var aes = this.aes;\n    var p = pidcrypt.getParams(); //get parameters for operation set by init\n    if(!byteArray)\n      byteArray = p.encryptIn;\n    pidcrypt.setParams({encryptIn: byteArray});\n    if(!p.dataIn) pidcrypt.setParams({dataIn:byteArray});\n    var iv = pidCryptUtil.convertFromHex(p.iv);\n    //PKCS5 paddding\n    var charDiv = p.blockSize - ((byteArray.length+1) % p.blockSize);\n    if(p.A0_PAD)\n      byteArray[byteArray.length] = 10\n    for(var c=0;c<charDiv;c++) byteArray[byteArray.length] = charDiv;\n    var nBytes = Math.floor(p.nBits/8);  // nr of bytes in key\n    var keyBytes = new Array(nBytes);\n    var key = pidCryptUtil.convertFromHex(p.key);\n    for (var i=0; i<nBytes; i++) {\n      keyBytes[i] = isNaN(key.charCodeAt(i)) ? 0 : key.charCodeAt(i);\n    }\n    // generate key schedule\n    var keySchedule = aes.expandKey(keyBytes);\n    var blockCount = Math.ceil(byteArray.length/p.blockSize);\n    var ciphertxt = new Array(blockCount);  // ciphertext as array of strings\n    var textBlock = [];\n    var state = pidCryptUtil.toByteArray(iv);\n    for (var b=0; b<blockCount; b++) {\n      // XOR last block and next data block, then encrypt that\n      textBlock = byteArray.slice(b*p.blockSize, b*p.blockSize+p.blockSize);\n      state = aes.xOr_Array(state, textBlock);\n      state = aes.encrypt(state.slice(), keySchedule);  // -- encrypt block --\n      ciphertxt[b] = pidCryptUtil.byteArray2String(state);\n    }\n    var ciphertext = ciphertxt.join('');\n    pidcrypt.setParams({dataOut:ciphertext, encryptOut:ciphertext});\n\n    //remove all parameters from enviroment for more security is debug off\n    if(!pidcrypt.isDebug() && pidcrypt.clear) pidcrypt.clearParams();\n   return ciphertext || '';\n  }\n\n\n/**\n* Encrypt a text using AES encryption in CBC mode of operation\n*  - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\n*\n* Unicode multi-byte character safe\n*\n* one of the pidCrypt.AES.CBC init funtions must be called before execution\n*\n* @param  plaintext: text to encrypt\n*\n* @return aes-cbc encrypted text openssl compatible\n*/\n pidCrypt.AES.CBC.prototype.encrypt = function(plaintext) {\n    var pidcrypt = this.pidcrypt;\n    var salt = '';\n    var p = pidcrypt.getParams(); //get parameters for operation set by init\n    if(!plaintext)\n      plaintext = p.dataIn;\n    if(p.UTF8)\n      plaintext = pidCryptUtil.encodeUTF8(plaintext);\n    pidcrypt.setParams({dataIn:plaintext, encryptIn: pidCryptUtil.toByteArray(plaintext)});\n    var ciphertext = this.encryptRaw()\n    salt = 'Salted__' + pidCryptUtil.convertFromHex(p.salt);\n    ciphertext = salt  + ciphertext;\n    ciphertext = pidCryptUtil.encodeBase64(ciphertext);  // encode in base64\n    pidcrypt.setParams({dataOut:ciphertext});\n    //remove all parameters from enviroment for more security is debug off\n    if(!pidcrypt.isDebug() && pidcrypt.clear) pidcrypt.clearParams();\n\n    return ciphertext || '';\n  }\n\n/**\n* Encrypt a text using AES encryption in CBC mode of operation\n*  - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\n*\n* Unicode multi-byte character safe\n*\n* @param  dataIn: plain text\n* @param  password: String\n* @param  options {\n*           nBits: aes bit size (128, 192 or 256)\n*         }\n*\n* @param  plaintext: text to encrypt\n*\n* @return aes-cbc encrypted text openssl compatible\n*\n*/\n  pidCrypt.AES.CBC.prototype.encryptText = function(dataIn,password,options) {\n   this.initEncrypt(dataIn, password, options);\n   return this.encrypt();\n  }\n\n\n\n/**\n* Decrypt a text encrypted by AES in CBC mode of operation\n*\n* one of the pidCrypt.AES.CBC init funtions must be called before execution\n*\n* @param  byteArray: aes-cbc encrypted text as array of bytes\n* \n* @return           decrypted text as String\n*/\npidCrypt.AES.CBC.prototype.decryptRaw = function(byteArray) {\n    var aes = this.aes;\n    var pidcrypt = this.pidcrypt;\n    var p = pidcrypt.getParams(); //get parameters for operation set by init\n    if(!byteArray)\n      byteArray = p.decryptIn;\n    pidcrypt.setParams({decryptIn: byteArray});\n    if(!p.dataIn) pidcrypt.setParams({dataIn:byteArray});\n    if((p.iv.length/2)<p.blockSize)\n      return pidcrypt.appendError('pidCrypt.AES.CBC.decrypt: Sorry, can not decrypt without complete set of parameters.\\n Length of key,iv:'+p.key.length+','+p.iv.length);\n    var iv = pidCryptUtil.convertFromHex(p.iv);\n    if(byteArray.length%p.blockSize != 0)\n      return pidcrypt.appendError('pidCrypt.AES.CBC.decrypt: Sorry, the encrypted text has the wrong length for aes-cbc mode\\n Length of ciphertext:'+byteArray.length+byteArray.length%p.blockSize);\n    var nBytes = Math.floor(p.nBits/8);  // nr of bytes in key\n    var keyBytes = new Array(nBytes);\n    var key = pidCryptUtil.convertFromHex(p.key);\n    for (var i=0; i<nBytes; i++) {\n      keyBytes[i] = isNaN(key.charCodeAt(i)) ? 0 : key.charCodeAt(i);\n    }\n    // generate key schedule\n    var keySchedule = aes.expandKey(keyBytes);\n    // separate byteArray into blocks\n    var nBlocks = Math.ceil((byteArray.length) / p.blockSize);\n    // plaintext will get generated block-by-block into array of block-length strings\n    var plaintxt = new Array(nBlocks.length);\n    var state = pidCryptUtil.toByteArray(iv);\n    var ciphertextBlock = [];\n    var dec_state = [];\n    for (var b=0; b<nBlocks; b++) {\n      ciphertextBlock = byteArray.slice(b*p.blockSize, b*p.blockSize+p.blockSize);\n      dec_state = aes.decrypt(ciphertextBlock, keySchedule);  // decrypt ciphertext block\n      plaintxt[b] = pidCryptUtil.byteArray2String(aes.xOr_Array(state, dec_state));\n      state = ciphertextBlock.slice(); //save old ciphertext for next round\n    }\n    \n    // join array of blocks into single plaintext string and return it\n    var plaintext = plaintxt.join('');\n    if(pidcrypt.isDebug()) pidcrypt.appendDebug('Padding after decryption:'+ pidCryptUtil.convertToHex(plaintext) + ':' + plaintext.length + '\\n');\n    var endByte = plaintext.charCodeAt(plaintext.length-1);\n    //remove oppenssl A0 padding eg. 0A05050505\n    if(p.A0_PAD){\n        plaintext = plaintext.substr(0,plaintext.length-(endByte+1));\n    }\n    else {\n      var div = plaintext.length - (plaintext.length-endByte);\n      var firstPadByte = plaintext.charCodeAt(plaintext.length-endByte);\n      if(endByte == firstPadByte && endByte == div)\n        plaintext = plaintext.substr(0,plaintext.length-endByte);\n    }\n    pidcrypt.setParams({dataOut: plaintext,decryptOut: plaintext});\n\n    //remove all parameters from enviroment for more security is debug off\n    if(!pidcrypt.isDebug() && pidcrypt.clear) pidcrypt.clearParams();\n\n   return plaintext || '';\n  }\n\n/**\n* Decrypt a base64 encoded text encrypted by AES in CBC mode of operation\n* and removes padding from decrypted text\n*\n* one of the pidCrypt.AES.CBC init funtions must be called before execution\n*\n* @param  ciphertext: base64 encoded and aes-cbc encrypted text\n*\n* @return           decrypted text as String\n*/\n  pidCrypt.AES.CBC.prototype.decrypt = function(ciphertext) {\n    var pidcrypt = this.pidcrypt;\n    var p = pidcrypt.getParams(); //get parameters for operation set by init\n    if(ciphertext)\n      pidcrypt.setParams({dataIn:ciphertext});\n    if(!p.decryptIn) {\n      var decryptIn = pidCryptUtil.decodeBase64(p.dataIn);\n      if(decryptIn.indexOf('Salted__') == 0) decryptIn = decryptIn.substr(16);\n      pidcrypt.setParams({decryptIn: pidCryptUtil.toByteArray(decryptIn)});\n    }\n    var plaintext = this.decryptRaw();\n    if(p.UTF8)\n      plaintext = pidCryptUtil.decodeUTF8(plaintext);  // decode from UTF8 back to Unicode multi-byte chars\n    if(pidcrypt.isDebug()) pidcrypt.appendDebug('Removed Padding after decryption:'+ pidCryptUtil.convertToHex(plaintext) + ':' + plaintext.length + '\\n');\n    pidcrypt.setParams({dataOut:plaintext});\n\n    //remove all parameters from enviroment for more security is debug off\n    if(!pidcrypt.isDebug() && pidcrypt.clear) pidcrypt.clearParams();\n    return plaintext || '';\n  }\n\n/**\n* Decrypt a base64 encoded text encrypted by AES in CBC mode of operation\n* and removes padding from decrypted text\n*\n* one of the pidCrypt.AES.CBC init funtions must be called before execution\n*\n* @param  dataIn: base64 encoded aes encrypted text\n* @param  password: String\n* @param  options {\n*           nBits: aes bit size (128, 192 or 256),\n*           UTF8: boolean, set to false when decrypting certificates,\n*           A0_PAD: boolean, set to false when decrypting certificates\n*         }\n*\n* @return           decrypted text as String\n*/\n   pidCrypt.AES.CBC.prototype.decryptText = function(dataIn, password, options) {\n     this.initDecrypt(dataIn, password, options);\n     return this.decrypt();\n   }\n\n}\n\n"],"sourceRoot":""}